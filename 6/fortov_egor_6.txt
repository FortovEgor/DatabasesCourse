---------- ФФРТОВ ЕГОР БПИ214 ----------
----------------------------------------------------------------------------
-- ЗАДАНИЕ 1
-- Показать все названия книг вместе с именами издателей.
SELECT title, pub_name
FROM books
INNER JOIN publishers ON books.publisher_id = publishers.id;

--  В какой книге наибольшее количество страниц?
SELECT title
FROM books
WHERE pages_num = (
    SELECT MAX(pages_num)
    FROM books
    );

-- Какие авторы написали более 5 книг?
SELECT author
FROM books
GROUP BY author
HAVING COUNT(*) > 5;

-- В каких книгах более чем в два раза больше страниц,
-- чем среднее количество страниц для всех книг?
SELECT title
FROM books
WHERE pages_num > 2 * (SELECT AVG(pages_num) FROM books);

-- Какие категории содержат подкатегории?
SELECT cat_name
FROM categories
WHERE parent IS NOT NULL;

-- У какого автора (предположим, что имена авторов уникальны)
-- написано максимальное количество книг?
SELECT author, COUNT(*) AS book_count
FROM books
GROUP BY author
ORDER BY book_count
LIMIT 1;

-- Какие читатели забронировали все книги (не копии), написанные "Марком Твеном"?
SELECT reader_id
FROM reader_borrows
JOIN book_copies ON reader_borrows.book_id = book_copies.id
JOIN books ON book_copies.isbn = books.isbn
WHERE books.author = 'Марк Твен'
GROUP BY reader_id
HAVING COUNT(DISTINCT books.isbn) = (SELECT COUNT(*) FROM books WHERE author = 'Марк Твен');


-- Какие книги имеют более одной копии?
SELECT books.title
FROM book_copies
INNER JOIN books ON books.isbn = book_copies.isbn
GROUP BY books.title
HAVING COUNT(*) > 1;

-- ТОП 10 самых старых книг
SELECT title
FROM books
ORDER BY pub_year DESC
LIMIT 10;

-- Перечислите все категории в категории “Спорт” (с любым уровнем вложености).
WITH RECURSIVE subcategories AS (
    SELECT cat_name, parent
    FROM categories
    WHERE cat_name = 'Спорт'
    UNION ALL
    SELECT c.cat_name, c.parent
    FROM categories c
    JOIN subcategories sc ON c.parent = sc.cat_name
)
SELECT cat_name
FROM subcategories;

----------------------------------------------------------------------------
-- ЗАДАНИЕ 2
-- Добавьте запись о бронировании читателем ‘Василеем Петровым’ книги с ISBN 123456
-- и номером копии 4.
INSERT INTO reader_borrows (reader_id, book_id, expiration_date) VALUES ((SELECT id FROM readers WHERE first_name = 'Василий' AND last_name = 'Петров'),
(SELECT id FROM book_copies WHERE isbn = '123456' AND position = '4'), CURRENT_DATE);

-- Удалить все книги, год публикации которых превышает 2000 год.
DELETE FROM books WHERE pub_year > 2000;

-- Измените дату возврата для всех книг категории "Базы данных", начиная с 01.01.2016,
-- чтобы они были в заимствовании на 30 дней дольше (предположим, что в SQL можно добавлять числа к датам).
UPDATE reader_borrows SET expiration_date = expiration_date + 30
WHERE book_id IN (
    SELECT bc.id
    FROM books b
    INNER JOIN book_copies bc ON b.isbn = bc.isbn
    INNER JOIN categories c ON b.category = c.cat_name
    WHERE c.cat_name = 'Базы данных' AND expiration_date >= '2016-01-01');

----------------------------------------------------------------------------
-- ЗАДАНИЕ 3
-- Рассмотрим следующую реляционную схему:
--
-- * Student( MatrNr, Name, Semester )
-- * Check( MatrNr, LectNr, ProfNr, Note )
-- * Lecture( LectNr, Title, Credit, ProfNr )
-- * Professor( ProfNr, Name, Room )
--
-- Опишите на русском языке результаты следующих запросов:
--
-- 1.
-- ```sql
-- SELECT s.Name, s.MatrNr FROM Student s
-- WHERE NOT EXISTS (
-- SELECT * FROM Check c WHERE c.MatrNr = s.MatrNr AND c.Note >= 4.0 ) ;
-- ```
--
-- 2.
-- ```sql
-- ( SELECT p.ProfNr, p.Name, sum(lec.Credit)
-- FROM Professor p, Lecture lec
-- WHERE p.ProfNr = lec.ProfNr
-- GROUP BY p.ProfNr, p.Name)
-- UNION
-- ( SELECT p.ProfNr, p.Name, 0
-- FROM Professor p
-- WHERE NOT EXISTS (
-- SELECT * FROM Lecture lec WHERE lec.ProfNr = p.ProfNr ));
-- ```
--
-- 3.
-- ```sql
-- SELECT s.Name, p.Note
-- FROM Student s, Lecture lec, Check c
-- WHERE s.MatrNr = c.MatrNr AND lec.LectNr = c.LectNr AND c.Note >= 4
-- AND c.Note >= ALL (
-- SELECT c1.Note FROM Check c1 WHERE c1.MatrNr = c.MatrNr )
-- ```
-- ОТВЕТ:
-- 1. Вывести имена и номера студентов, у которых нет оценок (Note) выше или равных 4.0.
--
-- 2. Вывести информацию о преподавателях (номер, имя) и суммарное количество кредитов всех лекций, которые они ведут. Если у преподавателя нет лекций, то вывести его номер, имя и 0 как суммарное количество кредитов.
--
-- 3. Вывести имена студентов и их оценки, где оценка (Note) студента выше или равна 4.0 и является максимальной среди всех его оценок. Это предполагает, что каждый студент может иметь несколько оценок.
